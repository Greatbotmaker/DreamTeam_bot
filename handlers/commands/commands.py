import traceback

from aiogram import Router
from aiogram.filters import Text, Command, ChatMemberUpdatedFilter, CREATOR, ADMINISTRATOR, MEMBER, RESTRICTED, LEFT, \
    KICKED
from aiogram.types import Message, ChatMemberUpdated, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from bot import bot, botDB, app
from aiogram.filters import IS_MEMBER, IS_NOT_MEMBER
from aiogram import html
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

from handlers.commands.moderation import error_user_not_found
from keyboards.inline import inline_kb
from functions.user import get_mention, time_in_group, get_target
from functions.members import get_messages_count
from functions.time import convert_from_secconds
import random

#Inline KeyBoard
ikb = inline_kb()

router = Router()

#–ì–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
@router.message(Command(commands=["start"]))
async def command_start(message: Message):
    user = message.from_user
    if not message.chat.type == "private":
        return
    if not botDB.user_exists(user.id):
        return await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {get_mention(user)} ! –ß—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=ikb.join_link().as_markup(), parse_mode='HTML', disable_web_page_preview=True)

@router.message(Command(commands=['profile', '–ø—Ä–æ—Ñ–∏–ª—å']))
async def profile_command(message: Message):
    user = message.from_user
    get_stats = botDB.get_all_users_stats(user.id)
    stats = get_stats[3]
    if len(message.text.split()) > 1:
        target = (await get_target(message))
        if not target:
            return await message.answer(error_user_not_found)
        user = target.user
    profile_msg = (
        f"–ü—Ä–æ—Ñ–∏–ª—å <b>{user.first_name}</b> (<i>{str(get_stats[7])}</i>)\n\n<b>üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n<b> ‚îú</b> <i>—Å–æ–æ–±—â–µ–Ω–∏—è:</i> {int(str(stats).split(':')[0]) + int(str(stats).split(':')[1]) + int(str(stats).split(':')[2].split('_')[0]) + int(str(stats).split('_')[1].split(':')[0])}"
        f"\n<b> ‚îî</b> <i>—Ä–µ–ø—É—Ç–∞—Ü–∏—è:</i> {str(get_stats[2])}"
        f"\n\n<i>–° –Ω–∞–º–∏ —É–∂–µ <b>{time_in_group(user.id)}</b> –¥.</i>")
    return await message.answer(profile_msg, parse_mode='HTML',disable_notification=True)


#–¢–û–ü
#–ü–æ–∫–∞ —á—Ç–æ, —Å–∞–º–∞—è —Å–ª–æ–∂–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –∫–æ—Ç–æ—Ä—É—é —è –¥–µ–ª–∞–ª
async def generate_top(type, time, rows=10):
    text1 = {'all':'–±–æ–ª—Ç—É–Ω–æ–≤', 'text':'–±–æ–ª—Ç—É–Ω–æ–≤', 'media':'–ª—é–±–∏—Ç–µ–ª–µ–π —Ñ–æ—Ç–æ', 'photo':'–ª—é–±–∏—Ç–µ–ª–µ–π —Ñ–æ—Ç–æ', 'video':'–ª—é–±–∏—Ç–µ–ª–µ–π –≤–∏–¥–µ–æ', 'voice':'–ª—é–±–∏—Ç–µ–ª–µ–π –≥–æ–ª–æ—Å–æ–≤—ã—Ö (–∫–æ–ª-–≤–æ)', 'voicecount':'–ª—é–±–∏—Ç–µ–ª–µ–π –≥–æ–ª–æ—Å–æ–≤—ã—Ö (–∫–æ–ª-–≤–æ)', 'voicedur':'–ª—é–±–∏—Ç–µ–ª–µ–π –≥–æ–ª–æ—Å–æ–≤—ã—Ö (–¥–ª–∏–Ω–∞)'}.get(type)
    text2 = {1:'–∑–∞ –≤—Å—ë –≤—Ä–µ–º—è', 2:'–∑–∞ –¥–µ–Ω—å', 3:'–∑–∞ –Ω–µ–¥–µ–ª—é', 4:'–∑–∞ –º–µ—Å—è—Ü'}.get(int(time))
    list = {}
    text = ""
    for row in botDB.get_all_users_stats(0):
        usr_id = row[1]
        usr_firstname = botDB.get_all_users(usr_id)[3]
        num = await get_messages_count(type, row[int(time) + 2])
        list[usr_firstname] = num
    list = dict(sorted(list.items(), key=lambda item: item[1], reverse=True))
    position = 1
    for item in list:
        if position <= rows:
            text += f"{position}. <b>{item}</b>: {list[item] if not type == 'voicedur' else convert_from_secconds(list[item])}\n"
            position += 1
    if position < rows:
        for i in range(0, rows - position + 1):
            text += f"{position}. -\n"
            position += 1
    return f"–¢–æ–ø {rows} {text1} {text2}:\n\n{text}"


@router.callback_query(Text(startswith="button_top_"))
async def top_type_callbacks(callback: CallbackQuery):
    buttons = (callback.message.reply_markup.inline_keyboard)
    #await callback.message.answer(f"{buttons}")
    if callback.data.split("_")[2] in "type":
        type = callback.data.split("_")[3]
        list = []
        for button in buttons[-1]:
            list.append(button.text)
        time = (list.index('üîò') + 1)
    elif callback.data.split("_")[2] in "time":
        time = (callback.data.split("_")[3])
        list = []
        if len(buttons) < 3:
            for button in buttons[0]:
                list.append(button.text)
            type = {1:'all', 2:'text', 3:'media', 4:'voice'}.get(list.index('üîò') + 1)
        else:
            for button in buttons[1]:
                if button.text[0] == '‚úÖ':
                    list.append(button.text)
            type = {'‚úÖ –§–æ—Ç–æ':'photo', '‚úÖ –í–∏–¥–µ–æ':'video', '‚úÖ –ö–æ–ª-–≤–æ':'voicecount', '‚úÖ –î–ª–∏–Ω–∞':'voicedur'}.get(''.join(list))
    else:
        return
    try:
        if type in ['all', 'text']:
            await callback.message.edit_text(f"{await generate_top(type, time)}", reply_markup=ikb.top_buttons(type, time).as_markup(), parse_mode='HTML')
        if type in ['media', 'voice', 'photo', 'video', 'voicecount', 'voicedur']:
            subtype = 2 if type in ['video', 'voicedur'] else 1
            await callback.message.edit_text(f"{await generate_top(type, time)}", reply_markup=ikb.top_buttons(type, time, subtype).as_markup(), parse_mode='HTML')
        await callback.answer("‚úÖ")
    except:
        await callback.answer("‚ùå")



@router.message(Command(commands=['top', '—Ç–æ–ø']))
async def top_command(message: Message):
    msg = await message.answer("C–µ–∫—É–Ω–¥–æ—á–∫—É...")
    await msg.edit_text(f"{await generate_top('all', 1, 10)}", parse_mode='HTML', reply_markup=ikb.top_buttons().as_markup())










#special for elbebrioo by XtraF ‚ù§Ô∏è
@router.message(Command(commands=["huesosit", "—Ö—É–µ—Å–æ—Å–∏—Ç—å"]))
async def huesosit_command(message : Message):
    oski = ["–ú–∏—Ö–∞–∏–ª, –µ–±–∞—Ç—å-–∫–æ–ø–∞—Ç—å. \n–í–æ—Ç —É–∂ —á–µ–ª–∞ –Ω–µ —Å—ã—Å–∫–∞—Ç—å,\n–ß—Ç–æ –±—ã —Ç–∞–∫ —Å–µ–±—è –ª—é–±–∏–ª \n–ò –∂–∞–ª–µ–ª, –∏ —Å–∫–ª–æ–Ω–µ–Ω –±—ã–ª \n–°–∞–º –∫ —Å–µ–±–µ –≤–æ –≤—Å–µ–º –∏ –≤—Å—è–∫. \n–°–ª—É—à–∞–π, –ú–∏—à–∞, —Ç—ã –¥—É—Ä–∞–∫?\n–õ—É—á—à–µ –∫ —Å–∏—Å—å–∫–∞–º —Ç—ã —Ç—è–Ω–∏—Å—å.\n–¢–∞–º —Ç–µ–±—è –ø–æ–¥–Ω–∏–º—É—Ç –≤–≤—ã—Å—å,\n–ë—É–¥—É—Ç —Ç–∞–º —Ç–µ–±—è –ª—é–±–∏—Ç—å\n–ò –∫–æ–Ω–µ—Ü —Ç–≤–æ–π —Ç–µ—Ä–µ–±–∏—Ç—å,\n–ü–æ—Ç–æ–º—É —á—Ç–æ –±–∞–±—ã - —ç—Ç–æ\n–¶–µ–ª—å —Ä–∞–∑–≤—Ä–∞—Ç–∞ –≤—Å–µ–≥–æ —Å–≤–µ—Ç–∞,\n–ù—É –∞ —Å–∞–º —Å–µ–±–µ –∏ —Ç–∞–∫‚Ä¶\n–ú–∏—à–∞, –ú–∏—à–∞ —Ç—ã –¥—É—Ä–∞–∫‚Ä¶\n",
            "–ú–∏—à–∞ - —Ö—É–µ–≤–∞—è –∫—Ä—ã—à–∞", "–ú–∏—à–∫–∞ - –ø–æ—Ç–Ω–∞—è –ø–æ–¥–º—ã—à–∫–∞", "–ú–∏—à–∞ - –ø–æ–ª–∫–∏–ª–æ –∫–∞—à–∏—à–∞.", "–ú–∏—à–∫–∞ - –≤ –æ—á–∫–µ –∫—Ä—ã—à–∫–∞.", "–ú–∏—à–∫–∞ - —ë–±–∞–Ω—ã–π –ø—Ä–∏–¥—É—Ä–æ–∫,\n–ü–æ–ª—É—ë–±–æ–∫, –ø–æ–ª—É–¥—É—Ä–æ–∫,\n–ö–æ—Å–æ–ª–∞–ø—ã–π –¥–æ–ª–±–æ–µ–±.\n–ú–∏—à–∞ - —ë–±–∞–Ω—ã–π –ø–∏–∑–¥—é–∫.\n", "–ú–∏—à–∞ - —Ç–æ—Ä–º–æ–∑ —Å—Ç–µ–±–∞–Ω—É—Ç—ã–π,\n–¢–æ—Ä–º–æ–∑–Ω—É—Ç—ã–π, –ø—Å–∏—Ö–∞–Ω—É—Ç—ã–π,\n–ù–∞—Ä–∫–æ–º–∞–Ω, –∫–∞–∫–∏—Ö —Å—ã—Å–∫–∞—Ç—å,\n–í –∂–æ–ø—É —Ç—Ä–∞—Ö–Ω—É—Ç–∞—è –±–ª—è–¥—å,\n–ï–±–∞–Ω—É—Ç–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π,\n–ù–µ–¥–æ–¥–µ–ª–∞–Ω–Ω–æ —Ä–æ–∂–¥–µ–Ω–Ω—ã–π\n",
            "–£—Ä–æ–Ω–∏–ª–∏ –º–∏—à–∫—É –Ω–∞ –ø–æ–ª,\n–û—Ç–æ—Ä–≤–∞–ª–∏ –º–∏—à–∫–µ –ª–∞–ø—É,\n–í –ø–æ–ø—É –º–∏—à–∫–µ –≤—Å—Ç–∞–≤–ª–µ–Ω –≤–µ–Ω–∏–∫ ,\n –ú–∏—à–∫–∞ –¥–æ–ª–∂–µ–Ω –º–Ω–æ–≥–æ –¥–µ–Ω–µ–≥", "–ö–∞—Å—É–º–∏–Ω–∞ –∏ –ú–∏—à–∞ —à—É–º–µ–ª–∏ –Ω–∞ –∫—Ä—ã—à–µ, \n–ü–æ—Å–ª–µ –¥–≤—É—Ö –≤—ã—Å—Ç—Ä–µ–ª–æ–≤ —Å—Ç–∞–ª–æ –ø–æ—Ç–∏—à–µ!", "–ú–∏—à–∞, –ø–æ—à—ë–ª –Ω–∞—Ö—É–π !", "–ö—Ä—á, –±–ª—è—Ç—å, –º–Ω–µ –ª–µ–Ω—å —É–∂–µ –∏—Å–∫–∞—Ç—å –¥–µ–±–∏–ª—å–Ω—ã–µ —Å—Ç–∏—à–∫–∏ –ø—Ä–æ –ú–∏—à—É, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –∏–¥–∏ –Ω–∞—Ö—É–π, –∞ —Å—Ç–∏—Ö –ø—Ä–∏–¥—É–º–∞–π —Å–∞–º.", "–ï—Å–ª–∏ –≤–∞—à–µ –∏–º—è –ú–∏—à–∞, —Ç–æ —Å–æ—Å–∏—Ç–µ –≤—ã –ø–æ—Ç–∏—à–µ.",
            "–ú–∏—à–∞–∞–∞–∞, –ø–æ—Ä–∞ –≤ —Å–∞–¥–∏–∫ !", "–£ –ú–∏—à–∏ —Ö—É–π 2 —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞.", "–ú–∏—à–∞ –µ–±–∞–Ω—ã–π —Ö—É–µ—Å–æ—Å.", "–ú–∏—à–∞, –∫–∞–∫ –∂–µ —è —Ö–æ—á—É, —á—Ç–æ–±—ã —Ç–µ–±—è –≤—ã–µ–±–∞–ª–æ –†–æ–∑–æ–≤–æ–µ –û–±–ª–∞–∫–æ, –∑–∞—â–µ–∫–æ—Ç–∞–≤ —Ç–≤–æ–π —Ö—É–π –¥–æ —Å–º–µ—Ä—Ç–∏, –∞ –ø–æ—Ç–æ–º –æ—Ç–æ—Ä–≤–∞–ª–æ —Ç–µ–±–µ —è–π—Ü–∞ –Ω–∞—Ö—É–π, —á—Ç–æ–±—ã –Ω–µ –≤—ã–µ–±—ã–≤–∞–ª—Å—è –∏ –±—ã–ª –¥–æ–±—Ä—ã–º.", "–ú–∏—à–∞, –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ —è —Ç–µ–±—è –ª—é–±–ª—é ‚ù§", "–ü–æ—Å–æ—Å–∏\n\n- –ú–æ—Ä–≥–µ–Ω—à—Ç–µ—Ä–Ω.", "–ú–∏—à–∞ —É–µ–±–∞–Ω, –¥–∞–π –¥–µ–Ω–µ–≥ –Ω–∞ –æ–ø–ª–∞—Ç—É —Ö–æ—Å—Ç–∏–Ω–≥–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.",
            "–ê –≤—ã –∑–Ω–∞–ª–∏, —á—Ç–æ –ú–∏—à–∞ –Ω–µ–¥–∞–≤–Ω–æ –µ–∑–¥–∏–ª –≤ –ß–µ—á–Ω—é ?!!! –ù–ï–¢ ?!!! –ù–£ —Ç–æ–≥–¥–∞ –¥–µ—Ä–∂–∏—Ç–µ —Å–º–∞—á–Ω—ã–µ —Ñ–æ—Ç–∫–∏, —á–µ—Ä–µ–∑ –ø—è—Ç—å –º–∏–Ω—É—Ç —Å–∫–∏–Ω—É."]

    osk = (random.choice(oski))
    await message.answer(f'{osk}', parse_mode='HTML')
