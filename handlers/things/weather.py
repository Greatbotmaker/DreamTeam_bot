import requests, asyncio
from bot import bot
from aiogram import Router
from aiogram.filters import Text, Command
from aiogram.types import Message, ChatPermissions, User, Chat
from config import WEATHER_TOKEN
from datetime import datetime
from pytz import timezone
from functions.time import convert_from_unix
from dateutil.tz import *

import traceback

router = Router()

#
def ToD(time):
    hours = int(time.split(':')[0])
    return ("üåå –ù–æ—á—å" if hours <= 6 else("üåÑ –£—Ç—Ä–æ" if hours < 12 else("üèû –î–µ–Ω—å" if hours < 18 else "üåÜ –í–µ—á–µ—Ä")))


@router.message(Command(commands=['weather', '–ø–æ–≥–æ–¥–∞']))
async def weather_command(message: Message):
    if len(message.text.split()) < 2:
        return await message.answer(f"<b>–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –≥–æ—Ä–æ–¥/–ø–æ—Å—ë–ª–æ–∫.</b>", parse_mode='HTML')
    try:
        city = " ".join(message.text.split()[1:len(message.text.split())])
        try:
            data = requests.get(f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_TOKEN}&units=metric").json()
        except:
            return await message.answer("–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å –∏—Å—á–µ—Ä–ø–∞–Ω. –ö–∞–∫–∏–º, –±—Ç—å –æ–±—Ä–∞–∑–æ–º ?! :(")
        tz = data["timezone"]
        cur_time = str(datetime.now(tzoffset("t", tz))).split('.')[0].split()[1]
        cur_date = str(datetime.now(tzoffset("t", tz))).split('.')[0].split()[0]
        times_of_day = ToD(str(cur_time))
        temp = data["main"]["temp"]
        humidity = data["main"]["humidity"]
        pressure = data["main"]["pressure"]
        wind_speed = data["wind"]["speed"]
        weather_type = data["weather"][0]["main"]
        wd = {"Clouds": "‚òÅ –û–±–ª–∞—á–Ω–æ", "Rain": "üåß –î–æ–∂–¥—å", "Drizzle": "üåß –°–ª–∞–±—ã–π –¥–æ–∂–¥—å", "Thunderstorm": "‚õà –ì—Ä–æ–∑–∞", "Snow": "üå® –°–Ω–µ–≥", "Mist": "üå´ –¢—É–º–∞–Ω",
              "Clear": "üåô –Ø—Å–Ω–æ" if int(str(cur_time).split(':')[0]) <= 6 else "‚òÄ –Ø—Å–Ω–æ"}.get(weather_type)
        sunrise_time = str(datetime.fromtimestamp(data["sys"]["sunrise"]).astimezone(tzoffset('t', tz))).split('.')[0].split()[1].split('+')[0].split('-')[0]
        sunset_time = str(datetime.fromtimestamp(data["sys"]["sunset"]).astimezone(tzoffset('t', tz))).split('.')[0].split()[1].split('+')[0].split('-')[0]
        day_length = str(datetime.fromtimestamp(data["sys"]["sunset"]) - datetime.fromtimestamp(data["sys"]["sunrise"]))
        await message.reply(
            f"<b>–ü–æ–≥–æ–¥–∞ –≤ {city}:</b>\n\n<b>{wd}</b> ({times_of_day} <i>{cur_time[0:-3]}</i>)\n\n"
            f"<b>üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</b> {temp} C¬∞\n<b>üí¶ –í–ª–∞–∂–Ω–æ—Å—Ç—å</b> {humidity}%\n"
            f"<b>üí® –í–µ—Ç–µ—Ä</b> {wind_speed} –º/—Å\n<b>‚è± –î–∞–≤–ª–µ–Ω–∏–µ</b> {pressure} –≥–ü–∞\n\n"
            f"<b>üåÑ –í–æ—Å—Ö–æ–¥: </b><i>{sunrise_time}</i>\n<b>üåá –ó–∞–∫–∞—Ç: </b><i>{sunset_time}</i>\n\n<b>üèô –ü—Ä–æ–¥–æ–ª–∂. –¥–Ω—è: </b><i>{day_length}</i>"
            f"", parse_mode='HTML', disable_notification=True)
    except:
        await message.answer(f"<b>–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–ª–∏ –≥–æ—Ä–æ–¥/–ø–æ—Å—ë–ª–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</b>", parse_mode='HTML')